rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {                  
    
    match /users/{userDocId} {
          allow read: if true;
          allow update, delete: if request.auth != null && (
            resource.data.userId == request.auth.uid ||
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
          );
          allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        }


    // Users-app collection: same logic as users, scoped to ownership
    match /users-app/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      allow update: if request.auth != null && (
        request.auth.uid == resource.data.userId || 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly([
          'privacyPolicyAccepted', 'privacyPolicyAcceptedAt', 'lastSignIn'
        ])
      );

      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    // Missing Persons: public read, only owners or admins can modify
    match /missingPersons/{docId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && (
        (resource.data.userId != null && request.auth.uid == resource.data.userId) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

              // Reports: public read, only creators or admins can write
          match /reports/{reportId} {
            // Allow anyone to read
            allow read: if true;

            // Allow any authenticated user to create a report
            allow create: if request.auth != null;

            // Allow only the report creator or an admin to update/delete
            allow update, delete: if request.auth != null && (
              request.auth.uid == resource.data.uid || // Matches the uid field in report
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "admin"
            );
          }


    // Reports-app: similar access control
    match /reports-app/{reportId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.uid ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // IRF-test collection: secure to user or admin
    match /irf-test/{docId} {
      allow read, list: if request.auth != null && (
        resource == null ||
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow update, delete: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }

    // Rules for incidents collection
    match /incidents/{incidentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null;
    }


    // Sequences: authenticated users only
    match /sequences/{sequenceId} {
      allow read, write: if request.auth != null;
    }

    match /archivedCases/{docId} {
      // Allow read and create if the user is authenticated
      allow read, create: if request.auth != null;

      // Allow update and delete if:
      // - the user is the owner of the document (matches userId in the existing doc)
      // - OR the user has role 'admin'
      allow update, delete: if request.auth != null && (
        (resource.data.userId == request.auth.uid) ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin'
      );
    }
  }
}