-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.booking_sources (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  description text,
  created_at timestamp with time zone DEFAULT now(),
  color text,
  CONSTRAINT booking_sources_pkey PRIMARY KEY (id)
);
CREATE TABLE public.bookings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  check_in date,
  check_out date,
  status USER-DEFINED DEFAULT 'pending'::booking_status,
  total_amount numeric,
  created_at timestamp with time zone DEFAULT now(),
  source_id uuid,
  CONSTRAINT bookings_pkey PRIMARY KEY (id),
  CONSTRAINT bookings_source_id_fkey FOREIGN KEY (source_id) REFERENCES public.booking_sources(id)
);
CREATE TABLE public.expense_categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE,
  is_variable boolean NOT NULL DEFAULT false,
  budget numeric,
  description text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT expense_categories_pkey PRIMARY KEY (id)
);
CREATE TABLE public.expenses (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  booking_id uuid,
  name text,
  amount numeric,
  date date,
  month integer,
  year integer,
  created_at timestamp with time zone DEFAULT now(),
  category_id uuid,
  CONSTRAINT expenses_pkey PRIMARY KEY (id),
  CONSTRAINT expenses_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(id),
  CONSTRAINT fk_expenses_category_id FOREIGN KEY (category_id) REFERENCES public.expense_categories(id)
);
CREATE TABLE public.housekeeping_staff (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text,
  contact text,
  email text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT housekeeping_staff_pkey PRIMARY KEY (id)
);
CREATE TABLE public.housekeeping_tasks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  room_number text,
  task_type text,
  assigned_staff uuid NOT NULL,
  due_date date,
  due_time time without time zone,
  priority text,
  priority_weight integer DEFAULT 3 CHECK (priority_weight >= 1 AND priority_weight <= 5),
  status USER-DEFINED DEFAULT 'pending'::housekeeping_task_status,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT housekeeping_tasks_pkey PRIMARY KEY (id),
  CONSTRAINT housekeeping_tasks_assigned_staff_fkey FOREIGN KEY (assigned_staff) REFERENCES public.housekeeping_staff(id)
);
CREATE TABLE public.inventory_categories (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT inventory_categories_pkey PRIMARY KEY (id)
);
CREATE TABLE public.inventory_items (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  category_id uuid NOT NULL,
  name text,
  unit text,
  current_stock integer,
  min_stock integer,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT inventory_items_pkey PRIMARY KEY (id),
  CONSTRAINT inventory_items_category_id_fkey FOREIGN KEY (category_id) REFERENCES public.inventory_categories(id)
);
CREATE TABLE public.notifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  type text,
  title text,
  message text,
  priority USER-DEFINED DEFAULT 'medium'::notification_priority,
  is_read boolean DEFAULT false,
  related_booking uuid,
  related_task uuid,
  related_item uuid,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT notifications_pkey PRIMARY KEY (id),
  CONSTRAINT notifications_related_item_fkey FOREIGN KEY (related_item) REFERENCES public.inventory_items(id),
  CONSTRAINT notifications_related_task_fkey FOREIGN KEY (related_task) REFERENCES public.housekeeping_tasks(id),
  CONSTRAINT notifications_related_booking_fkey FOREIGN KEY (related_booking) REFERENCES public.bookings(id)
);
CREATE TABLE public.revenue (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  booking_id uuid,
  expense_id uuid,
  income numeric DEFAULT 0.00,
  expense numeric DEFAULT 0.00,
  net_income numeric DEFAULT (COALESCE(income, (0)::numeric) - COALESCE(expense, (0)::numeric)),
  month integer,
  year integer,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT revenue_pkey PRIMARY KEY (id),
  CONSTRAINT revenue_expense_id_fkey FOREIGN KEY (expense_id) REFERENCES public.expenses(id),
  CONSTRAINT revenue_booking_id_fkey FOREIGN KEY (booking_id) REFERENCES public.bookings(id)
);

-- ==========================================================
-- 1️⃣  ENUM types (used by column defaults and RLS)
-- ==========================================================
CREATE TYPE IF NOT EXISTS booking_status           AS ENUM ('pending','confirmed','cancelled','completed');
CREATE TYPE IF NOT EXISTS housekeeping_task_status AS ENUM ('pending','in-progress','done');
CREATE TYPE IF NOT EXISTS notification_priority    AS ENUM ('low','medium','high');

/* -------------------------------------------------
   3️⃣  Indexes (including the one you added)
   ------------------------------------------------- */
-- FK‑related indexes
CREATE INDEX IF NOT EXISTS idx_expenses_booking_id
    ON public.expenses (booking_id);
CREATE INDEX IF NOT EXISTS idx_inventory_items_category_id
    ON public.inventory_items (category_id);
CREATE INDEX IF NOT EXISTS idx_housekeeping_tasks_assigned_staff
    ON public.housekeeping_tasks (assigned_staff);
CREATE INDEX IF NOT EXISTS idx_housekeeping_tasks_priority_weight
    ON public.housekeeping_tasks (priority_weight);
CREATE INDEX IF NOT EXISTS idx_notifications_booking
    ON public.notifications (related_booking);
CREATE INDEX IF NOT EXISTS idx_notifications_task
    ON public.notifications (related_task);
CREATE INDEX IF NOT EXISTS idx_notifications_item
    ON public.notifications (related_item);

-- Date / analytics indexes
CREATE INDEX IF NOT EXISTS idx_bookings_created_at
    ON public.bookings (created_at);
CREATE INDEX IF NOT EXISTS idx_expenses_created_at
    ON public.expenses (created_at);
CREATE INDEX IF NOT EXISTS idx_revenue_created_at
    ON public.revenue (created_at);
CREATE INDEX IF NOT EXISTS idx_expenses_month_year
    ON public.expenses (month, year);
CREATE INDEX IF NOT EXISTS idx_revenue_month_year
    ON public.revenue (month, year);
CREATE INDEX IF NOT EXISTS idx_notifications_created_at
    ON public.notifications (created_at);
CREATE INDEX IF NOT EXISTS idx_notifications_is_read
    ON public.notifications (is_read);

-- Index you specifically requested
CREATE INDEX IF NOT EXISTS idx_bookings_check_in
    ON public.bookings (check_in);


/* -------------------------------------------------
   4️⃣  Helper functions (used by triggers)
   ------------------------------------------------- */
CREATE OR REPLACE FUNCTION public.add_booking_revenue()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.revenue (
        booking_id,
        income,
        month,
        year
    ) VALUES (
        NEW.id,
        NEW.total_amount,
        EXTRACT(MONTH FROM NEW.created_at)::int,
        EXTRACT(YEAR FROM NEW.created_at)::int
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.add_expense_revenue()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.revenue (
        booking_id,
        expense_id,
        expense,
        month,
        year
    ) VALUES (
        NEW.booking_id,
        NEW.id,
        NEW.amount,
        NEW.month,
        NEW.year
    );
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.set_expense_month_year()
RETURNS TRIGGER AS $$
BEGIN
    NEW.month := EXTRACT(MONTH FROM NEW.date);
    NEW.year  := EXTRACT(YEAR  FROM NEW.date);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.set_revenue_month_year()
RETURNS TRIGGER AS $$
BEGIN
    NEW.month := EXTRACT(MONTH FROM NEW.created_at);
    NEW.year  := EXTRACT(YEAR  FROM NEW.created_at);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.notify_low_stock()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.current_stock < NEW.min_stock THEN
        INSERT INTO public.notifications (
            type,
            title,
            message,
            priority,
            related_item
        ) VALUES (
            'inventory',
            'Low Stock Alert',
            format('Item "%s" is low on stock. Current: %s, Minimum: %s',
                   NEW.name, NEW.current_stock, NEW.min_stock),
            'high',
            NEW.id
        );
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION public.set_booking_created_at()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.created_at IS NULL THEN
        NEW.created_at := now();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


/* -------------------------------------------------
   5️⃣  Triggers
   ------------------------------------------------- */
CREATE TRIGGER trg_add_booking_revenue
AFTER INSERT ON public.bookings
FOR EACH ROW
EXECUTE FUNCTION public.add_booking_revenue();

CREATE TRIGGER trg_add_expense_revenue
AFTER INSERT ON public.expenses
FOR EACH ROW
EXECUTE FUNCTION public.add_expense_revenue();

CREATE TRIGGER trg_set_expense_month_year
BEFORE INSERT ON public.expenses
FOR EACH ROW
EXECUTE FUNCTION public.set_expense_month_year();

CREATE TRIGGER trg_set_revenue_month_year
BEFORE INSERT ON public.revenue
FOR EACH ROW
EXECUTE FUNCTION public.set_revenue_month_year();

CREATE TRIGGER trg_notify_low_stock
AFTER INSERT OR UPDATE ON public.inventory_items
FOR EACH ROW
EXECUTE FUNCTION public.notify_low_stock();

CREATE TRIGGER trg_set_booking_created_at
BEFORE INSERT ON public.bookings
FOR EACH ROW
EXECUTE FUNCTION public.set_booking_created_at();